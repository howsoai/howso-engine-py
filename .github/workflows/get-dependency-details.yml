name: Reusable WF - Get Dependency Details

on:
  workflow_call:
    inputs:
      owner:
        required: false
        type: string
        default: "howsoai"
      repo:
        required: true
        type: string
      payload:
        required: false
        type: string
      skip-version-json-check:
        required: false
        type: boolean
        default: false
    outputs:
      run-type:
        description: "Run type to be used in GitHub CLI command for dependency query"
        value: ${{ jobs.get-dependency-details.outputs.run-type }}
      run-id:
        description: "Run id to be used in GitHub CLI command for dependency query"
        value: ${{ jobs.get-dependency-details.outputs.run-id }}
      build-date:
        description: "The datetime of the run (non-release)"
        value: ${{ jobs.get-dependency-details.outputs.build-date }}
      build-title:
        description: "The display title of the run (non-release)"
        value: ${{ jobs.get-dependency-details.outputs.build-title }}
      head-sha:
        description: "The commit hash used for the workflow run"
        value: ${{ jobs.get-dependency-details.outputs.head-sha }}
      url:
        description: "A URL pointing to the workflow run"
        value: ${{ jobs.get-dependency-details.outputs.url }}

defaults:
  run:
    shell: bash

jobs:

  get-dependency-details:
    runs-on: ubuntu-latest
    outputs:
      run-type: ${{ steps.dependency.outputs.run-type }}
      run-id: ${{ steps.dependency.outputs.run-id }}
      build-date: ${{ steps.dependency.outputs.build-date }}
      build-title: ${{ steps.dependency.outputs.build-title }}
      head-sha: ${{ steps.dependency.outputs.head-sha }}
      url: ${{ steps.dependency.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - name: Get dependency details
        id: dependency
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Parsing JSON payload: '${{ inputs.payload }}'..."
          ID=""

          if ! [[ -n "${{ inputs.payload }}" && $(echo '${{ inputs.payload }}' | jq 'has("${{ inputs.repo }}")') == true ]]; then
              # Repo not specified in payload; check version.json
              if [ "${{ inputs.skip-version-json-check }}" = true ]; then
                echo "No JSON payload given with repo ${{ inputs.repo }}, and skip-version-json-check flag is set. Exiting."
                exit 0
              fi
              echo "No JSON payload given with repo ${{ inputs.repo }}, using version.json"
              ID=$(jq -r '.dependencies."${{ inputs.repo }}"' version.json)
              echo "Found build ID for ${{  inputs.repo }} in version.json: '$ID'"
          else
              ID=$(echo '${{ inputs.payload }}' | jq -r '."${{ inputs.repo }}"')
              echo "Payload contains build ID for ${{ inputs.repo }}: '$ID'"
          fi

          echo "Searching for ${{ inputs.repo }} build id '$ID'..."
          if gh release view --repo ${{ inputs.owner }}/${{ inputs.repo }} "$ID" > /dev/null 2>&1; then
              # Release
              echo "Found release build"
              echo "run-type=$(echo "release")" >> $GITHUB_OUTPUT
              # Set metadata (sha, url)
              head_sha=$(gh release view --repo ${{ inputs.owner }}/${{ inputs.repo }} $ID --json targetCommitish | jq '.targetCommitish')
              url=$(gh release view --repo ${{ inputs.owner }}/${{ inputs.repo }} $ID --json url | jq '.url')
              echo "head-sha=$(echo "$head_sha")" >> $GITHUB_OUTPUT
              echo "url=$(echo "$url")" >> $GITHUB_OUTPUT
          elif gh run view --repo ${{ inputs.owner }}/${{ inputs.repo }} "$ID" > /dev/null 2>&1; then
              # Prerelease (workflow run)
              echo "Found non-release build"
              echo "run-type=$(echo "run")" >> $GITHUB_OUTPUT
              # Set metadata (build date, title, sha, url)
              build_date=$(gh run view --repo ${{ inputs.owner }}/${{ inputs.repo }} $ID --json createdAt | jq '.createdAt')
              build_title=$(gh run view --repo ${{ inputs.owner }}/${{ inputs.repo }} $ID --json displayTitle | jq '.displayTitle')
              head_sha=$(gh run view --repo ${{ inputs.owner }}/${{ inputs.repo }} $ID --json headSha | jq '.headSha')
              url=$(gh run view --repo ${{ inputs.owner }}/${{ inputs.repo }} $ID --json url | jq '.url')
              echo "build-date=$(echo "$build_date")" >> $GITHUB_OUTPUT
              echo "build-title=$(echo "$build_title")" >> $GITHUB_OUTPUT
              echo "head-sha=$(echo "$head_sha")" >> $GITHUB_OUTPUT
              echo "url=$(echo "$url")" >> $GITHUB_OUTPUT
          else
              echo "Build not found"
              exit 1
          fi

          echo "run-id=$(echo "$ID")" >> $GITHUB_OUTPUT